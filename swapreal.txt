/*
ID: aayush02
LANG: C++11
TASK: cereal
*/
#include <assert.h> 
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip> 
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <set>
#include <functional>
#include <bitset>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <fstream>
#include <numeric>

#define INF 9223372036854775
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define F0R(i, a) for (int i = 0; i < (a); i++)
#define f first
//#define s second

#define ll long long
#define fi(n) for (ll i = 0; i < n; i++)
#define fj(n) for (ll j = 0; j < n; j++)
#define pi pair<ll, ll>
#define pb push_back
#define sz(x) (int)x.size()
#define beg(x) x.begin()
#define en(x) x.end()
#define all(x) beg(x), en(x)

const int MOD = 1e9 + 7;
const int MX = 200005;

using namespace std;

void setIO(string name) {
#pragma warning (disable : 4996)
	ios_base::sync_with_stdio(0); cin.tie(0);
	freopen((name + ".in").c_str(), "r", stdin);
	freopen((name + ".out").c_str(), "w", stdout);
}


struct mi {
	int v; explicit operator int() const { return v; }
	mi(ll _v) : v(_v%MOD) { v += (v < 0)*MOD; }
	mi() : mi(0) {}
};
mi operator+(mi a, mi b) { return mi(a.v + b.v); }
mi operator-(mi a, mi b) { return mi(a.v - b.v); }
mi operator*(mi a, mi b) { return mi((ll)a.v*b.v); }

using ii = pair<ll, ll>;
using iii = tuple<ll, ll, ll>;
using vi = vector<ll>;
using vii = vector<ii>;
using vvii = vector<vii>;
using qii = priority_queue<ii, vii, greater<ii>>;
typedef pair<mi, mi> pmi;
typedef vector<mi> vmi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
using vvi = vector<vi>;
typedef vector<pmi> vpmi;




ll n, m, k, l, r, temp;
vector<ll> adj;
vector<bool> visited;
vector<ll> t;

void dfs(ll index)
{
	visited[index] = true;
	t.pb(index);
	if (!visited[adj[index]])
	{
		dfs(adj[index]);
	}
}


int main()
{
	setIO("swap");
	cin >> n >> m >> k;
	vector<ll> v(n);
	adj.resize(n + 1);
	visited.resize(n + 1);
	vector<vector<ll>> cycles;
	iota(all(v), 0);
	fi(m)
	{
		cin >> l >> r;
		l--; r--;
		for (int i = 0; i <= (r - l) / 2; i++)
		{
			temp = v[l + i];
			v[l + i] = v[r - i];
			v[r - i] = temp;
		}
	}
	fi(n)
	{
		adj[i] = v[i];
	}
	fi(n)
	{
		t = vector<ll>();
		if (!visited[i])
		{
			dfs(i);
			cycles.pb(t);
		}
	}
	vector<ll> ans(n);
	for (vector<ll> c : cycles)
	{
		for (int i = 0; i < c.size(); i++)
		{
			ans[c[i]] = c[(i + k) % c.size()];
		}
	}
	for (ll x : ans)
	{
		cout << x + 1 << endl;
	}
}