/*
ID: aayush02
LANG: C++11
TASK: cereal
*/
#include <assert.h> 
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip> 
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <set>
#include <functional>
#include <bitset>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <fstream>
#include <numeric>

#define INF 9223372036854775
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define F0R(i, a) for (int i = 0; i < (a); i++)
#define f first
//#define s second

#define ll long long
#define fi(n) for (ll i = 0; i < n; i++)
#define fj(n) for (ll j = 0; j < n; j++)
#define pi pair<ll, ll>
#define pb push_back
#define sz(x) (int)x.size()
#define beg(x) x.begin()
#define en(x) x.end()
#define all(x) beg(x), en(x)

const int MOD = 1e9 + 7;
const int MX = 200005;

using namespace std;

void setIO(string name) {
#pragma warning (disable : 4996)
	ios_base::sync_with_stdio(0); cin.tie(0);
	freopen((name + ".in").c_str(), "r", stdin);
	freopen((name + ".out").c_str(), "w", stdout);
}


struct mi {
	int v; explicit operator int() const { return v; }
	mi(ll _v) : v(_v%MOD) { v += (v < 0)*MOD; }
	mi() : mi(0) {}
};
mi operator+(mi a, mi b) { return mi(a.v + b.v); }
mi operator-(mi a, mi b) { return mi(a.v - b.v); }
mi operator*(mi a, mi b) { return mi((ll)a.v*b.v); }

using ii = pair<ll, ll>;
using iii = tuple<ll, ll, ll>;
using vi = vector<ll>;
using vii = vector<ii>;
using vvii = vector<vii>;
using qii = priority_queue<ii, vii, greater<ii>>;
typedef pair<mi, mi> pmi;
typedef vector<mi> vmi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
using vvi = vector<vi>;
typedef vector<pmi> vpmi;



template<int SZ> struct scc {
	bool visited[MX];
	vi adj[MX], radj[MX], todo, allComp;
	ll comp[MX];
	void addEdge(ll a, ll b)
	{
		adj[a].pb(b);
		radj[b].pb(a);
	}
	void dfs(ll u)
	{
		visited[u] = true;
		for (ll x : adj[u])
		{
			if (!visited[x]) dfs(x);
		}
		todo.pb(u);
	}
	void dfs1(ll u, ll d)
	{
		comp[u] = d;
		for (ll x : radj[u])
		{
			if (comp[x] == -1) dfs1(x, d);
		}
	}
	void genSCC(ll N)
	{
		for (int i = 0; i < N; i++)
		{
			comp[i] = -1;
			if (!visited[i]) dfs(i);
		}
		reverse(all(todo));
		for (int i = 0; i < todo.size(); i++)
		{
			if (comp[todo[i]] == -1)
			{
				dfs1(todo[i],todo[i]);
				allComp.pb(todo[i]);
			}
		}
	}
};

template<int SZ> struct twosat {
	scc<2 * SZ> S;
	ll temp[2 * SZ];
	bool ans[SZ];
	void OR(int x, int y)
	{
		S.addEdge(x ^ 1, y); S.addEdge(y ^ 1, x);
	}
	bool solve(ll N)
	{
		S.genSCC(N);
		for (int i = 0; i < N; i += 2)
		{
			if (S.comp[i] == S.comp[i ^ 1]) return 0;
		}
		reverse(all(S.allComp));
		for (int x : S.allComp)
		{
			if (temp[x] == 0)
			{
				temp[x] = 1; temp[S.comp[x ^ 1]] = -1;
			}
		}
		fi(N)
		{
			if (temp[S.comp[2 * i]] == 1)
			{
				ans[i] = 1;
			}
		}
		return 1;
	}
};
twosat<100000> T;

int n, m, co, z[MX];

int main() {
	
	cin >> n >> m;
	fi(n)
	{
		char b, d; int a, c;
		cin >> b >> a >> d >> c; a--; c--;
		T.OR((2 * a) + (b == '-'), (2 * c) + (d == '-'));
	}
	if (!T.solve(2 * m))
	{
		cout << "IMPOSSIBLE" << endl;
		return 0;
	}
	fi(m)
	{
		if (T.ans[i])
		{
			cout << "+";
		}
		else cout << "-";
		cout << " ";
	}
	return 0;
}