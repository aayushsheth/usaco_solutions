/*
ID: aayush02
LANG: C++11
TASK: cowntagion
*/
#include <assert.h> 
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip> 
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <set>
#include <functional>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <fstream>
#include <numeric>
    
#define INF 9223372036854775
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define F0R(i, a) for (int i = 0; i < (a); i++)
#define f first
//#define s second

#define ll long long
#define fi(n) for (ll i = 0; i < n; i++)
#define fj(n) for (ll j = 0; j < n; j++)
#define pi pair<ll, ll>
#define pb push_back

using namespace std;

const int MOD = 1000000007;

void setIO(string name) {
#pragma warning (disable : 4996)
    ios_base::sync_with_stdio(0); cin.tie(0);
    freopen((name + ".in").c_str(), "r", stdin);
    //freopen((name + ".out").c_str(), "w", stdout);
}


struct mi {
    int v; explicit operator int() const { return v; }
    mi(ll _v) : v(_v% MOD) { v += (v < 0) * MOD; }
    mi() : mi(0) {}
};
mi operator+(mi a, mi b) { return mi(a.v + b.v); }
mi operator-(mi a, mi b) { return mi(a.v - b.v); }
mi operator*(mi a, mi b) { return mi((ll)a.v * b.v); }

using ii = pair<ll, ll>;
using iii = tuple<ll, ll, ll>;
using vi = vector<ll>;
typedef pair<ll, int> pii;
using vii = vector<ii>;
using vvii = vector<vii>;
using qii = priority_queue<ii, vii, greater<ii>>;
typedef pair<mi, mi> pmi;
typedef vector<mi> vmi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
using vvi = vector<vi>;
typedef vector<pmi> vpmi;

const int max_n = 1e5 + 5;

ll n, m, x, y, temp = 0;
ll par[max_n];
bool visited[max_n];
ll id[max_n];
ll len[max_n]; //correlates id# to length
vector<set<ll>> adj1;
vector<set<ll>> adj;
vector<pair<ll, ll>> s;

vector<ll> a;

ll g_id = 1;

void dfs(ll x) {
    adj[g_id].insert(x);
    for (auto s : adj1[x]) {
        adj[g_id].insert(s);
    }
    visited[x] = true;
    id[x] = g_id;
    if (!visited[par[x]]) {
        dfs(par[x]);
    }
}

void swapp(int i , int i1) {
    ll temp = a[i];
    a[i] = a[i1];
    a[i1] = temp;
}

int main() {
    cin >> n >> m;
    a.resize(n + 1);
    iota(a.begin(), a.end(), 0);
    adj1.resize(n + 1);
    adj.resize(n + 1);
    fi(m) {
        cin >> x >> y;
        s.push_back({ x,y });
    }
    for (auto p : s) {
        adj1[a[p.first]].insert(p.second);
        adj1[a[p.second]].insert(p.first);
        swapp(p.first, p.second);
    }
    for (int i = 1; i <= n; i++) {
        par[a[i]] = i;
    }
    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            temp = 0;
            dfs(i);
            g_id++;
        }
    }       
    for (int i = 1; i <= n; i++) {
        cout << adj[id[i]].size() << endl;
    }
}