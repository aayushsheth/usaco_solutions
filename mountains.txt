/*
ID: aayush02
LANG: C++11
TASK: cereal
*/
#include <assert.h> 
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip> 
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <set>
#include <functional>
#include <bitset>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <fstream>
#include <numeric>

#define INF 9223372036854775
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define F0R(i, a) for (int i = 0; i < (a); i++)
#define f first
//#define s second

#define ll long long
#define fi(n) for (ll i = 0; i < n; i++)
#define fj(n) for (ll j = 0; j < n; j++)
#define pi pair<ll, ll>
#define pb push_back
#define sz(x) (int)x.size()
#define beg(x) x.begin()
#define en(x) x.end()
#define all(x) beg(x), en(x)

const int MOD = 1e9 + 7;
const int MX = 200005;

using namespace std;

void setIO(string name) {
#pragma warning (disable : 4996)
	ios_base::sync_with_stdio(0); cin.tie(0);
	freopen((name + ".in").c_str(), "r", stdin);
	//freopen((name + ".out").c_str(), "w", stdout);
}


struct mi {
	int v; explicit operator int() const { return v; }
	mi(ll _v) : v(_v%MOD) { v += (v < 0)*MOD; }
	mi() : mi(0) {}
};
mi operator+(mi a, mi b) { return mi(a.v + b.v); }
mi operator-(mi a, mi b) { return mi(a.v - b.v); }
mi operator*(mi a, mi b) { return mi((ll)a.v*b.v); }

using ii = pair<ll, ll>;
using iii = tuple<ll, ll, ll>;
using vi = vector<ll>;
using vii = vector<ii>;
using vvii = vector<vii>;
using qii = priority_queue<ii, vii, greater<ii>>;
typedef pair<mi, mi> pmi;
typedef vector<mi> vmi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
using vvi = vector<vi>;
typedef vector<pmi> vpmi;


bool compare(const pair<int, int>&i, const pair<int, int>&j)
{
	if (i.first == j.first)
	{
		return i.second > j.second;
	}
	else
	{
		return i.first < j.first;
	}
}


int main()
{
	ifstream fin("mountains.in");
	ofstream fout("mountains.out");
	vector<pair<ll, ll>> peaks;
	ll n, a, b;
	fin >> n; 
	fi(n)
	{
		fin >> a >> b;
		peaks.pb({ a,b });
	}
	sort(all(peaks), compare);
	ll curx, cury, tempx, tempy;
	tie(curx, cury) = peaks[0];
	ll hidden = 0;
	fi(n)
	{
		if (!i) continue;
		tie(tempx, tempy) = peaks[i];
		if ((curx >= (tempx - tempy)) and ((cury - curx) <= (tempy - tempx)))
		{
			curx = tempx; cury = tempy;
			hidden++;
		}
		else if (tempx <= (curx + cury) and (tempx + tempy) <= (cury + curx))
		{
			hidden++;
		}
		else
		{
			curx = tempx; cury = tempy;
		}
	}
	fout << n - hidden << endl;

}
