/*
ID: aayush02
LANG: C++11
TASK: perimeter
*/
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip> 
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <set>
#include <functional>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <fstream>
#include <numeric>
#pragma warning(disable:4996)

#define INF 1000000000
#define ll long long
#define fi(n) for (ll i = 0; i < n; i++)
#define fj(n) for (ll j = 0; j < n; j++)
#define MOD 1000000007;

using namespace std;
using vi = vector<ll>;
using vvi = vector<vi>;
using qi = queue<int>;

typedef vector<pair<int, int>> vpi;

#define FOR(i,a,b) for (int i = (a); i < (b); ++i)
#define F0R(i,a) FOR(i,0,a)
#define ROF(i,a,b) for (int i = (b)-1; i >= (a); --i)
#define R0F(i,a) ROF(i,0,a)
#define trav(a,x) for (auto& a: x)

#define pb push_back
#define rsz resize
#define sz(x) int(x.size())
#define all(x) begin(x), end(x)
#define f first
#define s second

void setIO(string name) {
	ios_base::sync_with_stdio(0); cin.tie(0);
	freopen((name + ".in").c_str(), "r", stdin);
	freopen((name + ".out").c_str(), "w", stdout);
}
//WASD
int moveX[] = {-1, 0, 1,0 };
int moveY[] = {0, -1, 0, 1};


int n, maxArea = 0, maxPerim = 0, tempArea = 0, tempPerim = 0;
bool check[1000][1000];
bool mapp[1000][1000];
string str;

int getPerim(int x, int y)
{
	int totSum = 0;
	//check left
	if (y == 0)
	{
		totSum++;
	}
	else if (!mapp[x][y - 1])
	{
		totSum++;
	}
	//check right
	if (y + 1 == n)
	{
		totSum++;
	}
	else if (!mapp[x][y + 1])
	{
		totSum++;
	}
	//check down
	if (x + 1 == n)
	{
		totSum++;
	}
	else if (!mapp[x + 1][y])
	{
		totSum++;
	}
	//check up
	if (x == 0)
	{
		totSum++;
	}
	else if (!mapp[x-1][y])
	{
		totSum++;
	}
	return totSum;
	
}

void dfs(int x, int y)
{
	check[x][y] = true;
	tempArea++;
	tempPerim += getPerim(x, y);
	fi(4)
	{
		if (x + moveX[i] == -1 || x + moveX[i] == n || y + moveY[i] == -1 || y + moveY[i] == n)
		{
			continue;
		}
		if (check[x + moveX[i]][y + moveY[i]] || !mapp[x + moveX[i]][y + moveY[i]])
		{
			continue;
		}
		dfs(x + moveX[i], y + moveY[i]);
	}
	return;
}

int main()
{
	setIO("perimeter");
	cin >> n;
	fi(n)
	{
		cin >> str;
		fj(n)
		{
			if (str[j] == '#')
			{
				mapp[i][j] = 1;
			}
			else
			{
				mapp[i][j] = 0;
			}
			check[i][j] = 0;
		}
	}
	fi(n)
	{
		fj(n)
		{
			if (!check[i][j] && mapp[i][j])
			{
				tempArea = 0;
				tempPerim = 0;
				dfs(i, j);
				if (tempArea > maxArea)
				{
					maxArea = tempArea;
					maxPerim = tempPerim;
				}
				if (tempArea == maxArea)
				{
					maxPerim = min(maxPerim, tempPerim);
				}
			}
			
		}
	}
	cout << maxArea << " " << maxPerim;
}