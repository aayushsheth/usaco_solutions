/*
ID: aayush02
LANG: C++11
TASK: cowntagion
*/
#include <assert.h> 
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip> 
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <set>
#include <functional>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <fstream>
#include <numeric>

#define INF 9223372036854775
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define F0R(i, a) for (int i = 0; i < (a); i++)
#define f first
//#define s second

#define ll long long
#define fi(n) for (ll i = 0; i < n; i++)
#define fj(n) for (ll j = 0; j < n; j++)
#define pi pair<ll, ll>
#define pb push_back

using namespace std;

const int MOD = 1000000007;

void setIO(string name) {
#pragma warning (disable : 4996)
    ios_base::sync_with_stdio(0); cin.tie(0);
    freopen((name + ".in").c_str(), "r", stdin);
    //freopen((name + ".out").c_str(), "w", stdout);
}


struct mi {
    int v; explicit operator int() const { return v; }
    mi(ll _v) : v(_v% MOD) { v += (v < 0) * MOD; }
    mi() : mi(0) {}
};
mi operator+(mi a, mi b) { return mi(a.v + b.v); }
mi operator-(mi a, mi b) { return mi(a.v - b.v); }
mi operator*(mi a, mi b) { return mi((ll)a.v * b.v); }

using ii = pair<ll, ll>;
using iii = tuple<ll, ll, ll>;
using vi = vector<ll>;
typedef pair<ll, int> pii;
using vii = vector<ii>;
using vvii = vector<vii>;
using qii = priority_queue<ii, vii, greater<ii>>;
typedef pair<mi, mi> pmi;
typedef vector<mi> vmi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
using vvi = vector<vi>;
typedef vector<pmi> vpmi;

vector<ll> blocks;
ll n, k, temp;


int main() {
    cin >> n >> k;
    fi(n) {
        cin >> temp;
        blocks.push_back((temp+11)/ 12);
    }
    //creating blocks
    
    sort(blocks.begin(), blocks.end());
    ll ans = blocks[n - 1];
    blocks.erase(unique(blocks.begin(), blocks.end()), blocks.end());
    n = blocks.size();
    vector<ll> diff;
    for (long long i = 1; i < n; i++) {
        diff.push_back(blocks[i] - blocks[i - 1] - 1);
    }
    diff.push_back(blocks[0] - 0 - 1);

    sort(diff.begin(), diff.end());
    reverse(diff.begin(), diff.end());


    for(int i = 0; i < k - 1 && i < diff.size(); i++){
        ans -= diff[i];
    }
    cout << (ans) * 12;

}