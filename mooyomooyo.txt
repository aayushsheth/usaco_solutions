#include <assert.h> 
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip> 
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <set>
#include <functional>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <fstream>
#include <numeric>

#define INF 9223372036854775
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define F0R(i, a) for (int i = 0; i < (a); i++)
#define f first
//#define s second

#define ll long long
#define fi(n) for (ll i = 0; i < n; i++)
#define fj(n) for (ll j = 0; j < n; j++)
#define pi pair<ll, ll>
#define pb push_back

const int MOD = 1e9 + 7;
const int MX = 200005;

using namespace std;

void setIO(string name) {
#pragma warning (disable : 4996)
	ios_base::sync_with_stdio(0); cin.tie(0);
	freopen((name + ".in").c_str(), "r", stdin);
	freopen((name + ".out").c_str(), "w", stdout);
}


struct mi {
	int v; explicit operator int() const { return v; }
	mi(ll _v) : v(_v%MOD) { v += (v < 0)*MOD; }
	mi() : mi(0) {}
};
mi operator+(mi a, mi b) { return mi(a.v + b.v); }
mi operator-(mi a, mi b) { return mi(a.v - b.v); }
mi operator*(mi a, mi b) { return mi((ll)a.v*b.v); }

using ii = pair<ll, ll>;
using iii = tuple<ll, ll, ll>;
using vi = vector<ll>;
using vii = vector<ii>;
using vvii = vector<vii>;
using qii = priority_queue<ii, vii, greater<ii>>;
typedef pair<mi, mi> pmi;
typedef vector<mi> vmi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
using vvi = vector<vi>;
typedef vector<pmi> vpmi;




ll n, k, t1, t2, t3;
string s;
bool flag = true;
int arr[100][10];
int dx[] = { 1,-1,0,0 }; //R L D U
int dy[] = { 0, 0, 1,-1 }; // R L D U
ll reg[1001];
ll check[100][10];
bool visited[100][10];

void gravity()
{
	for (int j = 0; j < 10; j++)
	{
		int low = n - 1;
		int high = n - 1;
		while (high >= 0)
		{
			while (arr[high][j] == 0 and high >=0)
			{
				high--;
			}
			if (high >= 0)
			{
				arr[low][j] = arr[high][j];
				low--; high--;
			}
		}
		while (low >= 0)
		{
			arr[low][j] = 0;
			low--;
		}
	}
}
void dfs(int x, int y, int c, int r)
{
	check[x][y] = r;
	visited[x][y] = true;
	reg[r]++;
	fi(4)
	{
		if (x + dx[i] >= 0 and x + dx[i] < n and y + dy[i] >= 0 and y + dy[i] < 10 and arr[x + dx[i]][y + dy[i]] == c and !visited[x + dx[i]][y + dy[i]])
		{
			dfs(x + dx[i], y + dy[i], c, r);
		}
	}
}
int main(void)
{
	setIO("mooyomooyo");
	cin >> n >> k;
	fi(n)
	{
		cin >> s;
		fj(s.length())
		{
			arr[i][j] = s[j] - 48;
		}
	}
	
	while (flag)
	{
		int r = 0;
		memset(check, 0, sizeof check);
		memset(reg, 0, sizeof reg);
		memset(visited, false, sizeof visited);
		flag = false;
		fi(n)
		{
			fj(10)
			{
				if (!arr[i][j] || visited[i][j])
				{
					continue;
				}
				dfs(i, j, arr[i][j], r++);
			}
		}
		fi(n)
		{
			fj(10)
			{
				if (!arr[i][j])
				{
					continue;
				}
				if (reg[check[i][j]] >= k)
				{
					arr[i][j] = 0;
					flag = true;
				}
			}
		}
		gravity();
	}
	fi(n)
	{
		fj(10)
		{
			cout << arr[i][j];
		}
		cout << endl;
	}
}


