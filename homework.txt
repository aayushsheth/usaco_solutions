#include <assert.h> 
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip> 
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <set>
#include <functional>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <fstream>
#include <numeric>

#define INF 9223372036854775
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define F0R(i, a) for (int i = 0; i < (a); i++)
#define f first
//#define s second

#define ll long long
#define fi(n) for (ll i = 0; i < n; i++)
#define fj(n) for (ll j = 0; j < n; j++)
#define pi pair<ll, ll>
#define pb push_back

const int MOD = 1e9 + 7;
const int MX = 200005;

using namespace std;

void setIO(string name) {
#pragma warning (disable : 4996)
	ios_base::sync_with_stdio(0); cin.tie(0);
	freopen((name + ".in").c_str(), "r", stdin);
	freopen((name + ".out").c_str(), "w", stdout);
}


struct mi {
	int v; explicit operator int() const { return v; }
	mi(ll _v) : v(_v%MOD) { v += (v < 0)*MOD; }
	mi() : mi(0) {}
};
mi operator+(mi a, mi b) { return mi(a.v + b.v); }
mi operator-(mi a, mi b) { return mi(a.v - b.v); }
mi operator*(mi a, mi b) { return mi((ll)a.v*b.v); }

using ii = pair<ll, ll>;
using iii = tuple<ll, ll, ll>;
using vi = vector<ll>;
using vii = vector<ii>;
using vvii = vector<vii>;
using qii = priority_queue<ii, vii, greater<ii>>;
typedef pair<mi, mi> pmi;
typedef vector<mi> vmi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
using vvi = vector<vi>;
typedef vector<pmi> vpmi;




ll n, m, t1, t2, t3, t4;



int main()
{
	setIO("homework");
	cin >> n;
	vector <ll> a(n + 1);
	fi(n)
	{
		cin >> a[i];
	}
	ll sum = a[n - 1];
	ll minn = a[n - 1];
	double ans = 0;
	ll num = 0;
	for (int j = n - 2; j > 0; j--)
	{
		minn = min(minn, a[j]);
		num++;
		sum += a[j];
		ans = max(ans, ((double(sum)) - double(minn)) / double(num));
	}
	vector<ll> an;
	sum = a[n - 1];
	minn = a[n - 1];
	num = 0;
	for (int j = n-2; j > 0; j--)
	{
		minn = min(minn, a[j]);
		num++;
		sum += a[j];
		if ((((double(sum)) - double(minn)) / double(num)) == ans)
		{
			an.push_back(j);
		}
	}
	sort(an.begin(), an.end());
	for (ll x : an)
	{
		cout << x << endl;
	}
	return 0;
}
/*
const int MAX_N = 100000;

long long score[MAX_N + 1];
long long suffix_sum[MAX_N + 1];
long long suffix_min[MAX_N + 1];
long long best_num, best_den;

int main(void)
{
	//ifstream fin("homework.in");
	//ofstream fout("homework.out");

	int N;

	cin >> N;
	for (int i = 1; i <= N; i++)
		cin >> score[i];

	suffix_sum[N] = score[N];
	suffix_min[N] = score[N];
	for (int i = N - 1; i >= 1; i--) {
		suffix_sum[i] = suffix_sum[i + 1] + score[i];
		suffix_min[i] = min(suffix_min[i + 1], score[i]);
	}

	best_num = 0;
	best_den = 1;

	for (int i = 1; i <= N - 2; i++)
		if ((suffix_sum[i + 1] - suffix_min[i + 1]) * best_den > best_num * (N - i - 1)) {
			best_num = suffix_sum[i + 1] - suffix_min[i + 1];
			best_den = N - i - 1;
		}

	for (int i = 1; i <= N - 2; i++)
		if ((suffix_sum[i + 1] - suffix_min[i + 1]) * best_den == best_num * (N - i - 1))
			cout << i << "\n";

	return 0;
}
*/