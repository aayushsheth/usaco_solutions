/*
ID: aayush02
LANG: C++11
TASK: cereal
*/
#include <assert.h> 
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip> 
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <set>
#include <functional>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <fstream>
#include <numeric>

#define INF 9223372036854775
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define F0R(i, a) for (int i = 0; i < (a); i++)
#define f first
//#define s second

#define ll long long
#define fi(n) for (ll i = 0; i < n; i++)
#define fj(n) for (ll j = 0; j < n; j++)
#define pi pair<ll, ll>
#define pb push_back

const int MOD = 1e9 + 7;
const int MX = 200005;

using namespace std;

void setIO(string name) {
#pragma warning (disable : 4996)
	ios_base::sync_with_stdio(0); cin.tie(0);
	freopen((name + ".in").c_str(), "r", stdin);
	freopen((name + ".out").c_str(), "w", stdout);
}


struct mi {
	int v; explicit operator int() const { return v; }
	mi(ll _v) : v(_v%MOD) { v += (v < 0)*MOD; }
	mi() : mi(0) {}
};
mi operator+(mi a, mi b) { return mi(a.v + b.v); }
mi operator-(mi a, mi b) { return mi(a.v - b.v); }
mi operator*(mi a, mi b) { return mi((ll)a.v*b.v); }

using ii = pair<ll, ll>;
using iii = tuple<ll, ll, ll>;
using vi = vector<ll>;
using vii = vector<ii>;
using vvii = vector<vii>;
using qii = priority_queue<ii, vii, greater<ii>>;
typedef pair<mi, mi> pmi;
typedef vector<mi> vmi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
using vvi = vector<vi>;
typedef vector<pmi> vpmi;

vii v;
vector<bool> a;
map<ll, bool> m;
ll n, x, t1, t2, y;
bool changed = false;


int main(void)
{
	setIO("cereal");
	cin >> n >> x;
	ll tot = 0;
	vector<ll> q1;
	vector<ll> q2;
	vector<ll> w;
	fi(n)
	{
		cin >> t1 >> t2;
		q1.pb(t1);
		q2.pb(t2);
		if (m.count(t1) == 0)
		{
			w.pb(1);
			m[t1] = true;
		}
		else
		{
			if (m[t1])
			{
				if (m.count(t2) == 0)
				{
					w.pb(2);
					m[t2] = true;
				}
				else
				{
					if (!m[t2])
					{
						w.pb(2);
						m[t2] = true;
					}
					else
					{
						w.pb(0);
					}
				}
			}
			else
			{
				w.pb(1);
				m[t1] = true;
			}
			
		}
	}
	map<ll, ll> r;
	ll sum;
	int index = 0;
	while (index < n)
	{
		t1 = q1[index];
		t2 = q2[index];
		y = w[index];
		sum = t1 + t2;
		if (r.count(sum) != 0)
		{
			r[sum]++;
		}
		else
		{
			r[sum] = 1;
		}
		index++;
	}
	std::map<ll, ll>::iterator it = r.begin();
	sum = 0;
	while(it != r.end())
	{
		sum += (it->second) - 1;
		it++;
	}
	ll as = m.size();
	ll in = 0;;
	fi(sum)
	{
		cout << as << endl;
		in++;
	}
	while (in < n)
	{
		as--;
		cout << as << endl;
		in++;
	}
	
}

