/*
ID: aayush02
LANG: C++11
TASK: cowntagion
*/
#include <assert.h> 
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip> 
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <set>
#include <functional>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <fstream>
#include <numeric>

#define INF 9223372036854775
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define F0R(i, a) for (int i = 0; i < (a); i++)
#define f first
//#define s second

#define ll long long
#define fi(n) for (ll i = 0; i < n; i++)
#define fj(n) for (ll j = 0; j < n; j++)
#define pi pair<ll, ll>
#define pb push_back

using namespace std;

const int MOD = 1000000007;

void setIO(string name) {
#pragma warning (disable : 4996)
    ios_base::sync_with_stdio(0); cin.tie(0);
    freopen((name + ".in").c_str(), "r", stdin);
    //freopen((name + ".out").c_str(), "w", stdout);
}


struct mi {
    int v; explicit operator int() const { return v; }
    mi(ll _v) : v(_v% MOD) { v += (v < 0) * MOD; }
    mi() : mi(0) {}
};
mi operator+(mi a, mi b) { return mi(a.v + b.v); }
mi operator-(mi a, mi b) { return mi(a.v - b.v); }
mi operator*(mi a, mi b) { return mi((ll)a.v * b.v); }

using ii = pair<ll, ll>;
using iii = tuple<ll, ll, ll>;
using vi = vector<ll>;
typedef pair<ll, int> pii;
using vii = vector<ii>;
using vvii = vector<vii>;
using qii = priority_queue<ii, vii, greater<ii>>;
typedef pair<mi, mi> pmi;
typedef vector<mi> vmi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
using vvi = vector<vi>;
typedef vector<pmi> vpmi;

const int max_n = 1e5 + 5;


ll grid[1000][1000];
ll grid1[2][1000];
ll dp[1000][4];
ll n;

int main() {
    cin >> n;
    fi(n) {
        fj(n) {
            cin >> grid[i][j];
            if (i % 2 == 0) {
                grid1[0][j] += grid[i][j];
            }
            else {
                grid1[1][j] += grid[i][j];
            }
        }
    }
    dp[0][0] = 0;
    dp[0][1] = grid1[0][0];
    dp[0][2] = grid1[1][0];
    dp[0][3] = grid1[0][0] + grid1[1][0];
    for (int i = 1; i < n; i++) {
        fj(4) {
            if (j == 0) {
                dp[i][0] = dp[i - 1][3];
            }
            else if (j == 1) { //place one on top
                dp[i][j] = max(dp[i - 1][1], dp[i - 1][2]) + grid1[0][i];
            }
            else if (j == 2) {
                dp[i][j] = max(dp[i - 1][1], dp[i - 1][2]) + grid1[1][i];
            }
            else {
                dp[i][j] = dp[i - 1][0] + grid1[0][i] + grid[1][i];
            }
        }
    }
    ll ans = 0;
    fi(4) {
        ans = max(ans, dp[n - 1][i]);
    }
    cout << ans;
}