vector<ll> a;
vector<ll> m_array;
// Initialize BIT with list in O(n)
void init()
{
	m_array = vector<ll>(a.size() + 1, 0);
	for (int idx = 0; idx < a.size(); idx++) {
		m_array[idx + 1] = a[idx];
	}
	for (int idx = 1; idx < m_array.size(); idx++) {
		int idx2 = idx + (idx & -idx);
		if (idx2 < m_array.size()) {
			m_array[idx2] += m_array[idx];
		}
	}
}

int prefix_query(int idx){
	// Computes prefix sum of up to the element at index idx
	int result = 0;
	for (++idx; idx > 0; idx -= idx & -idx) {
		result += m_array[idx];
	}
	return result;
}

int range_query(int from_idx, int to_idx){
	// Computes the range sum between two indices (both inclusive)
	if (from_idx == 0)
		return prefix_query(to_idx);
	else
		return prefix_query(to_idx) - prefix_query(from_idx - 1);
}

void update(int idx, int add) {
	// Add a value to the element at index idx
	for (++idx; idx < m_array.size(); idx += idx & -idx) {
		m_array[idx] += add;
	}
}