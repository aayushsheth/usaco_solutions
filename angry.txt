/*
ID: aayush02
LANG: C++11
TASK: triangles
*/
#include <assert.h> 
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip> 
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <set>
#include <functional>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <fstream>
#include <numeric>

#define INF 9223372036854775
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define F0R(i, a) for (int i = 0; i < (a); i++)
#define f first
//#define s second

#define ll long long
#define fi(n) for (ll i = 0; i < n; i++)
#define fj(n) for (ll j = 0; j < n; j++)
#define pi pair<ll, ll>
#define pb push_back

using namespace std;

const int MOD = 1000000007;

void setIO(string name) {
#pragma warning (disable : 4996)
	ios_base::sync_with_stdio(0); cin.tie(0);
	freopen((name + ".in").c_str(), "r", stdin);
	freopen((name + ".out").c_str(), "w", stdout);
}


struct mi {
	int v; explicit operator int() const { return v; }
	mi(ll _v) : v(_v%MOD) { v += (v < 0)*MOD; }
	mi() : mi(0) {}
};
mi operator+(mi a, mi b) { return mi(a.v + b.v); }
mi operator-(mi a, mi b) { return mi(a.v - b.v); }
mi operator*(mi a, mi b) { return mi((ll)a.v*b.v); }

using ii = pair<ll, ll>;
using iii = tuple<ll, ll, ll>;
using vi = vector<ll>;
typedef pair<ll, int> pii;
using vii = vector<ii>;
using vvii = vector<vii>;
using qii = priority_queue<ii, vii, greater<ii>>;
typedef pair<mi, mi> pmi;
typedef vector<mi> vmi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
using vvi = vector<vi>;
typedef vector<pmi> vpmi;

#define FOR(i, a, b) for (int i=a; i<(b); i++)
#define F0R(i, a) for (int i=0; i<(a); i++)
#define FORd(i,a,b) for (int i = (b)-1; i >= a; i--)
#define F0Rd(i,a) for (int i = (a)-1; i >= 0; i--)

#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define f first
//#define s second
#define lb lower_bound
#define ub upper_bound
#define all(x) x.begin(), x.end()

const ll MX = 100001;


// computes the minimum spanning tree in O(ElogE) time

ll n, m, a, b;
vector<ll> v;

bool valid(ll x)
{
	ll index = 1;
	ll k = 1;
	ll mdistance = v[0] + (2 * x);
	while (index < n)
	{
		if (v[index] > mdistance)
		{
			mdistance = v[index] + (2 * x);
			k++;
		}
		index++;
	}
	return k <= m;
}

int main() {
	setIO("angry");
	cin >> n >> m;
	v.resize(n);
	fi(n)
	{
		cin >> v[i];
	}
	if (n == 1)
	{
		cout << 1 << endl;
		return 0;
	}
	sort(v.begin(), v.end());
	long long lhs = 1;
	long long rhs = 1e18 + 1;
	while (lhs != rhs) {
		long long mid = (lhs + rhs) / 2;
		if (valid(mid)) {
			rhs = mid;
		}
		else {
			lhs = mid + 1;
		}
	}
	cout << rhs;
}