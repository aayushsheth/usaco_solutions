/*
ID: aayush02
LANG: C++11
TASK: cereal
*/
#include <assert.h> 
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip> 
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <set>
#include <functional>
#include <bitset>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <fstream>
#include <numeric>

#define INF 9223372036854775
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define F0R(i, a) for (int i = 0; i < (a); i++)
#define f first
//#define s second

#define ll long long
#define fi(n) for (ll i = 0; i < n; i++)
#define fj(n) for (ll j = 0; j < n; j++)
#define pi pair<ll, ll>
#define pb push_back
#define sz(x) (int)x.size()
#define beg(x) x.begin()
#define en(x) x.end()
#define all(x) beg(x), en(x)

const int MOD = 1e9 + 7;
const int MX = 200005;

using namespace std;

void setIO(string name) {
#pragma warning (disable : 4996)
	ios_base::sync_with_stdio(0); cin.tie(0);
	freopen((name + ".in").c_str(), "r", stdin);
	freopen((name + ".out").c_str(), "w", stdout);
}


struct mi {
	int v; explicit operator int() const { return v; }
	mi(ll _v) : v(_v%MOD) { v += (v < 0)*MOD; }
	mi() : mi(0) {}
};
mi operator+(mi a, mi b) { return mi(a.v + b.v); }
mi operator-(mi a, mi b) { return mi(a.v - b.v); }
mi operator*(mi a, mi b) { return mi((ll)a.v*b.v); }

using ii = pair<ll, ll>;
using iii = tuple<ll, ll, ll>;
using vi = vector<ll>;
using vii = vector<ii>;
using vvii = vector<vii>;
using qii = priority_queue<ii, vii, greater<ii>>;
typedef pair<mi, mi> pmi;
typedef vector<mi> vmi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
using vvi = vector<vi>;
typedef vector<pmi> vpmi;

#define FORN(i, n) for (int i = 0; i <  (int)(n); i++)
#define FOR1(i, n) for (int i = 1; i <= (int)(n); i++)
#define FORD(i, n) for (int i = (int)(n) - 1; i >= 0; i--)
#define FOREACH(i, c) for (typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define MOD 1000000007
#define INF 2000000000

vector < vector<vector<pair<ll, ll>>>> adj;
vector<vector<bool>> on;
vector<vector<bool>> visited;
ll n, m, t1, t2, t3, t4;
ll dx[] = { 1, -1, 0, 0 };
ll dy[] = { 0, 0, -1, 1 };

bool hasVisitedNeighbor(ll x, ll y)
{
	fi(4)
	{
		if (x + dx[i] < 0 || x + dx[i] >= n || y + dy[i] < 0 || y + dy[i] >= n)
		{
			continue;
		}
		if (visited[x + dx[i]][y + dy[i]] and on[x + dx[i]][y + dy[i]])
		{
			return true;
		}
	}
	return false;
}

void dfs(ll x, ll y)
{
	visited[x][y] = true;
	for (auto p : adj[x][y])
	{
		if (!on[p.first][p.second])
		{
			on[p.first][p.second] = true;
			if (hasVisitedNeighbor(p.first, p.second))
			{
				dfs(p.first, p.second);
			}
		}
	}
	fi(4)
	{
		if (x + dx[i] < 0 || x + dx[i] >= n || y + dy[i] < 0 || y + dy[i] >= n || visited[x+dx[i]][y+dy[i]])
		{
			continue;
		}
		if (on[x + dx[i]][y + dy[i]])
		{
			dfs(x + dx[i], y + dy[i]);
		}
	}
	
}

int main()
{
	setIO("lightson");
	cin >> n >> m;
	adj.resize(n, vector<vector<pair<ll,ll>>>(n));
	on.resize(n, vector<bool>(n));
	visited.resize(n, vector<bool>(n));
	fi(m)
	{
		cin >> t1 >> t2 >> t3 >> t4;
		t1--; t2--; t3--; t4--;
		adj[t1][t2].pb({ t3, t4 });
	}
	on[0][0] = true;
	dfs(0, 0);
	ll ans = 0;
	fi(n)
	{
		fj(n)
		{
			if (on[i][j])
			{
				ans++;
			}
		}
	}
	cout << ans << endl;
}