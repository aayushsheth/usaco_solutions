/*
ID: aayush02
LANG: C++11
TASK: fenceplan
*/
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip> 
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <set>
#include <functional>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <fstream>
#include <numeric>


#define INF 1000000000
#define ll long long
#define fi(n) for (ll i = 0; i < n; i++)
#define fj(n) for (ll j = 0; j < n; j++)
#define MOD 1000000007;

using namespace std;
using vi = vector<ll>;
using vvi = vector<vi>;
using qi = queue<int>;

typedef vector<pair<int, int>> vpi;

#define FOR(i,a,b) for (int i = (a); i < (b); ++i)
#define F0R(i,a) FOR(i,0,a)
#define ROF(i,a,b) for (int i = (b)-1; i >= (a); --i)
#define R0F(i,a) ROF(i,0,a)
#define trav(a,x) for (auto& a: x)

#define pb push_back
#define rsz resize
#define sz(x) int(x.size())
#define all(x) begin(x), end(x)
#define f first
#define s second


const int MX = 2e5 + 5;
ll n, m, t1, t2, minx = INF, maxx = 0, miny = INF, maxy = INF;
vector<pair<ll, ll>> v;
vector<vector<ll>> grid;
vector<bool>visited;

void dfs(ll x)
{
	if (visited[x]) return;
	visited[x] = true;
	maxx = max(maxx, v[x - 1].first);
	minx = min(minx, v[x - 1].first);
	maxy = max(maxy, v[x - 1].second);
	miny = min(miny, v[x - 1].second);
	fi(grid[x].size())
	{
		dfs(grid[x][i]);
	}
}


int main() {
	ifstream fin("fenceplan.in");
	ofstream fout("fenceplan.out");
	fin >> n >> m;
	v.resize(n);
	visited.resize(n+1);
	grid.resize(n + 1);
	fi(n)
	{
		fin >> t1 >> t2;
		v[i] = make_pair(t1, t2);
	}
	fi(m)
	{
		fin >> t1 >> t2;
		grid[t1].push_back(t2);
		grid[t2].push_back(t1);
	}
	ll ans = INF;
	for (int i = 1; i <= n; i++)
	{
		minx = INF, maxx = 0, miny = INF, maxy = 0;
		if (visited[i] || grid[i].size() == 0) continue;
		dfs(i);
		ans = min(ans, 2 * ((maxx - minx) + (maxy - miny)));
	}
	fout << ans;
}
