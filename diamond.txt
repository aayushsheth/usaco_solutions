/*
ID: aayush02
LANG: C++11
TASK: cereal
*/
#include <assert.h> 
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip> 
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <set>
#include <functional>
#include <bitset>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <fstream>
#include <numeric>

#define INF 9223372036854775
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define F0R(i, a) for (int i = 0; i < (a); i++)
#define f first
//#define s second

#define ll long long
#define fi(n) for (ll i = 0; i < n; i++)
#define fj(n) for (ll j = 0; j < n; j++)
#define pi pair<ll, ll>
#define pb push_back
#define sz(x) (int)x.size()
#define beg(x) x.begin()
#define en(x) x.end()
#define all(x) beg(x), en(x)

const int MOD = 1e9 + 7;
const int MX = 200005;

using namespace std;

void setIO(string name) {
#pragma warning (disable : 4996)
	ios_base::sync_with_stdio(0); cin.tie(0);
	freopen((name + ".in").c_str(), "r", stdin);
	freopen((name + ".out").c_str(), "w", stdout);
}


struct mi {
	int v; explicit operator int() const { return v; }
	mi(ll _v) : v(_v%MOD) { v += (v < 0)*MOD; }
	mi() : mi(0) {}
};
mi operator+(mi a, mi b) { return mi(a.v + b.v); }
mi operator-(mi a, mi b) { return mi(a.v - b.v); }
mi operator*(mi a, mi b) { return mi((ll)a.v*b.v); }

using ii = pair<ll, ll>;
using iii = tuple<ll, ll, ll>;
using vi = vector<ll>;
using vii = vector<ii>;
using vvii = vector<vii>;
using qii = priority_queue<ii, vii, greater<ii>>;
typedef pair<mi, mi> pmi;
typedef vector<mi> vmi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
using vvi = vector<vi>;
typedef vector<pmi> vpmi;


ll n, k, t;
vector<ll> d;
vector<ll> pref, suff;

int main()
{
	setIO("diamond");
	cin >> n >> k;
	pref.resize(n);
	suff.resize(n);
	fi(n)
	{
		cin >> t;
		d.pb(t);
	}
	sort(all(d));
	ll i1 = 0, i2 = 1; 
	while (i1 < n && i2 < n)
	{
		//if (i1 == 86)
		//{
		//	cout << "test";
		//}
		if (i1 == i2) i2++;
		if (i1)
		{
			if (d[i1 - 1] + k >= d[i1])
			{
				pref[i1] = pref[i1 - 1] - 2;
			}
		}
		pref[i1]++;
		while (i2 < n and d[i2] <= d[i1] + k)
		{
			pref[i1]++;
			i2++;
		}
		i1++;
	}
	while (i1 < n)
	{
		pref[i1] = pref[i1 - 1] - 1;
		i1++;
	}
	suff[n - 1] = pref[n - 1];
	for (int i = n - 2; i >= 0; i--)
	{
		suff[i] = max(pref[i], suff[i + 1]);
	}
	ll ans = 0;
	ll new_index;
	fi(n)
	{
		new_index = pref[i] - 1 + i;
		if (new_index < n - 1)
		{
			ans = max(ans, pref[i] + suff[new_index + 1]);
		}
		/*else
		{
			ans = max(ans, pref[i]);
		}*/
	}
	ans = max(ans, suff[0]);
	cout << ans << endl;
}
