/*
ID: aayush02
LANG: C++11
TASK: cereal
*/
#include <assert.h> 
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip> 
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <set>
#include <functional>
#include <bitset>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <fstream>
#include <numeric>

#define INF 9223372036854775
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define F0R(i, a) for (int i = 0; i < (a); i++)
#define f first
//#define s second

#define ll long long
#define fi(n) for (ll i = 0; i < n; i++)
#define fj(n) for (ll j = 0; j < n; j++)
#define pi pair<ll, ll>
#define pb push_back
#define sz(x) (int)x.size()
#define beg(x) x.begin()
#define en(x) x.end()
#define all(x) beg(x), en(x)

const int MOD = 1e9 + 7;
const int MX = 200005;

using namespace std;

void setIO(string name) {
#pragma warning (disable : 4996)
	ios_base::sync_with_stdio(0); cin.tie(0);
	freopen((name + ".in").c_str(), "r", stdin);
	freopen((name + ".out").c_str(), "w", stdout);
}


struct mi {
	int v; explicit operator int() const { return v; }
	mi(ll _v) : v(_v%MOD) { v += (v < 0)*MOD; }
	mi() : mi(0) {}
};
mi operator+(mi a, mi b) { return mi(a.v + b.v); }
mi operator-(mi a, mi b) { return mi(a.v - b.v); }
mi operator*(mi a, mi b) { return mi((ll)a.v*b.v); }

using ii = pair<ll, ll>;
using iii = tuple<ll, ll, ll>;
using vi = vector<ll>;
using vii = vector<ii>;
using vvii = vector<vii>;
using qii = priority_queue<ii, vii, greater<ii>>;
typedef pair<mi, mi> pmi;
typedef vector<mi> vmi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
using vvi = vector<vi>;
typedef vector<pmi> vpmi;

#define FORN(i, n) for (int i = 0; i <  (int)(n); i++)
#define FOR1(i, n) for (int i = 1; i <= (int)(n); i++)
#define FORD(i, n) for (int i = (int)(n) - 1; i >= 0; i--)
#define FOREACH(i, c) for (typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define MOD 1000000007
#define INF 2000000000

ll n, m, t, t1, t2;
vector<pair<ll, pair<ll, ll>>> v;
map<ll, ll> c; //cow to number of milk
map<ll, ll> check; //milk # to how many people have 
int main()
{
	setIO("measurement");
	cin >> n >> m;
	fi(n)
	{
		cin >> t >> t1 >> t2;
		v.pb({ t, {t1, t2} });
		c[t1] = m;
		check[m]++;
	}
	sort(all(v));
	ll max_so_far = m; //represetns out of all the cows who has the maximum amount of milk
	ll ans = 0;
	for (auto p : v)
	{
		if (p.second.second == 0) continue;
		if (c[p.second.first] == max_so_far)
		{
			if (check[max_so_far] == 1)
			{
				check.erase(max_so_far);
				c[p.second.first] += p.second.second;
				if (c[p.second.first] > check.rbegin()->first)
				{
					max_so_far = c[p.second.first];
					check[max_so_far]++;
				}
				else
				{
					ans++;
					max_so_far = check.rbegin()->first;
					check[max_so_far]++;
				}
			}
			else
			{
				ans++;
				check[max_so_far]--;
				c[p.second.first] += p.second.second;
				if (c[p.second.first] > max_so_far) max_so_far = c[p.second.first];
				check[c[p.second.first]]++;
			}
		}
		else
		{
			if (check[c[p.second.first]] == 1)
			{
				check.erase(c[p.second.first]);
				c[p.second.first] += p.second.second;
				check[c[p.second.first]]++;
				if (c[p.second.first] >= max_so_far)
				{
					ans++;
					max_so_far = c[p.second.first];
				}
			}
			else
			{
				check[c[p.second.first]]--;
				c[p.second.first] += p.second.second;
				check[c[p.second.first]]++;
				if (c[p.second.first] >= max_so_far)
				{
					ans++;
					max_so_far = c[p.second.first];
				}
			}
		}
	}
	cout << ans << endl;
}