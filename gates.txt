/*
ID: aayush02
LANG: C++11
TASK: cereal
*/
#include <assert.h> 
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip> 
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <set>
#include <functional>
#include <bitset>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <fstream>
#include <numeric>

#define INF 9223372036854775
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define F0R(i, a) for (int i = 0; i < (a); i++)
#define f first
//#define s second

#define ll long long
#define fi(n) for (ll i = 0; i < n; i++)
#define fj(n) for (ll j = 0; j < n; j++)
#define pi pair<ll, ll>
#define pb push_back
#define sz(x) (int)x.size()
#define beg(x) x.begin()
#define en(x) x.end()
#define all(x) beg(x), en(x)

const int MOD = 1e9 + 7;
const int MX = 200005;

using namespace std;

void setIO(string name) {
#pragma warning (disable : 4996)
	ios_base::sync_with_stdio(0); cin.tie(0);
	freopen((name + ".in").c_str(), "r", stdin);
	freopen((name + ".out").c_str(), "w", stdout);
}


struct mi {
	int v; explicit operator int() const { return v; }
	mi(ll _v) : v(_v%MOD) { v += (v < 0)*MOD; }
	mi() : mi(0) {}
};
mi operator+(mi a, mi b) { return mi(a.v + b.v); }
mi operator-(mi a, mi b) { return mi(a.v - b.v); }
mi operator*(mi a, mi b) { return mi((ll)a.v*b.v); }

using ii = pair<ll, ll>;
using iii = tuple<ll, ll, ll>;
using vi = vector<ll>;
using pl = pair<ll, pair<ll, ll>>;
using vii = vector<ii>;
using vvii = vector<vii>;
using qii = priority_queue<ii, vii, greater<ii>>;
typedef pair<mi, mi> pmi;
typedef vector<mi> vmi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
using vvi = vector<vi>;
typedef vector<pmi> vpmi;

#define FORN(i, n) for (int i = 0; i <  (int)(n); i++)
#define FOR1(i, n) for (int i = 1; i <= (int)(n); i++)
#define FORD(i, n) for (int i = (int)(n) - 1; i >= 0; i--)
#define FOREACH(i, c) for (typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define MOD 1000000007
#define INF 2000000000

ll n;
bool arr[4002][4002];
bool visited[4002][4002];
string s;
ll dx[] = { 1, -1, 0, 0 };
ll dy[] = { 0, 0, 1, -1 };
ll max_x = 0, min_x = INF, min_y = INF, max_y = 0;

void dfs(ll x, ll y)
{
	visited[x][y] = true;
	fi(4)
	{
		ll new_x = x + dx[i]; ll new_y = y + dy[i];
		
		if (new_x < min_x - 1|| new_x > max_x + 1 || new_y < min_y - 1 || new_y > max_y + 1|| visited[new_x][new_y] || arr[new_x][new_y]) continue;
		//cout << new_x << " " << new_y << endl;
		dfs(new_x, new_y);
	}
}

int main()
{
	setIO("gates");
	cin >> n;
	cin >> s;
	ll initial_x = 1000;
	ll initial_y = 1000;
	max_x = min_x = min_y = max_y = 1000;
	fi(n)
	{
		arr[initial_x][initial_y] = 1;
		if (s[i] == 'N')
		{
			initial_x--; arr[initial_x][initial_y] = 1;
			initial_x--; arr[initial_x][initial_y] = 1;
			min_x = min(min_x, initial_x);
		}
		else if (s[i] == 'S')
		{
			initial_x++; arr[initial_x][initial_y] = 1;
			initial_x++; arr[initial_x][initial_y] = 1;
			max_x = max(max_x, initial_x);
		}
		else if (s[i] == 'E')
		{
			initial_y++; arr[initial_x][initial_y] = 1;
			initial_y++; arr[initial_x][initial_y] = 1;
			max_y = max(max_y, initial_y);
		}
		else
		{
			initial_y--; arr[initial_x][initial_y] = 1;
			initial_y--; arr[initial_x][initial_y] = 1;
			min_y = min(min_y, initial_y);
		}
	}
	ll ans = 0;
	for(int i = min_x - 1; i <= max_x + 1; i++)
	{
		for(int j = min_y - 1; j <= max_y + 1; j++)
		{
			if (!visited[i][j] and !arr[i][j])
			{
				dfs(i, j);
				ans++;
			}
		}
	}
	cout << ans - 1 << endl;
}
