/*
ID: aayush02
LANG: C++
TASK: sleepy
*/
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <climits>
#include <cassert>
#include <string>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#include <queue>
#include <sstream>
#include <numeric>
#include <fstream>
#include <iostream>
#include <utility>
#include <iomanip>
#include <stack>

using namespace std;

vector <int> input;
vector <int> swapp;
int a, N, b, g, temp, temp1, t, c = 0;
int maxx = -1;

int main()
{
	ifstream fin("sleepy.in");
	ofstream fout("sleepy.out");
	fin >> N;
	input.resize(N);
	for (int i = 0; i < N; i++)
	{
		fin >> input[i];
	}
	swapp = input;
	sort(swapp.begin(), swapp.end());
	swapp.erase(swapp.begin() + N - 1);
	while (input != swapp)
	{
		if (input[0] == N)
		{
			input.erase(input.begin(), input.begin() + 1);
			c++;
		}
		else if (input[0] < input[1])
		{
			if (input[0] == 1 && find(input.begin(), input.end(), N) != input.end() && input[1] == 2)
			{
				rotate(input.begin(), input.begin() + 1, find(input.begin(), input.end(), N) + 1);
				c++;
			}
			else if (input[0] == 1 && input[1] == 2)
			{
				rotate(input.begin(), input.begin() + 1, find(input.begin(), input.end(), N-1) + 1);
			}
			else if (input[0] == 1 && input[1] == N)
			{
				rotate(input.begin(), input.begin() + 1, find(input.begin(), input.end(), N) + 1);
			}
			else if (input[0] == 1)
			{
				rotate(input.begin(), input.begin() + 1, find(input.begin(), input.end(), 2) - 1);
				c++;
			}
			
			else if (input[N - 1] == input[0] + 1)
			{
				rotate(input.begin(), input.begin() + 1, input.end() - 1);
				c++;
			}
			else
			{
				rotate(input.begin(), input.begin() + 1, find(input.begin(), input.end(), input[0] - 1) + 1);
				c++;
			}
		}
		else if (input[0] > input[1])
		{
			rotate(input.begin(), input.begin() + 1, input.end());
			c++;
		}
	}
	fout << c << "\n";
}