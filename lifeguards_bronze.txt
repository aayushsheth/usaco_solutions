import java.io.*;
import java.util.*;
public class Solution {
	  public static void main(String[] args) throws IOException {
	    BufferedReader br = new BufferedReader(new FileReader("lifeguards.in"));
	    PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter("lifeguards.out")));
	    int n = Integer.parseInt(br.readLine()); // n represents number of cows
	    int[] startValues = new int[n]; // store start values for each cow
	    int[] endValues = new int[n]; //store end values for each cow
	    for(int i = 0; i < n; i++) { // iterates over each cow 
	      StringTokenizer st = new StringTokenizer(br.readLine()); // takes the 
	      startValues[i] = Integer.parseInt(st.nextToken());
	      endValues[i] = Integer.parseInt(st.nextToken());
	    }
	    /*
	     * sValue eValue  index (i)
	     *    5     9        0
	     *    1     4        1
	     *    3     7        2
	     */
	    int [] timeInterval = new int[1000]; //at timeInterval[i] how many lifeguards are there for time i to i + 1
	    for (int i = 0; i < n; i++) {
	    	for(int j = startValues[i]; j < endValues[i]; j++) //first line of input its going to go from 5 to 8 [5 6 7 8] add one lifegaurd timeInterval[5] represents # of lifeguards from 5-6
	    	{
	    		timeInterval[j]++; //add one lifeguard at this specific moment in time (in this hour) 
	    	}
	    }
	    // now we have built timeInterval which achieves our purpose
	    // now we have to simulate removing a cow and then counting the total amount of time still covered
	    int [] timeIntervalWithoutOne = new int[1000];
	    int ans = 0;
	    int tempAns = 0;
	    for(int i = 0; i < n; i++) {
	    	//instead of saying timeIntervalWithoutOne = timeInterval, I manually go through and copy over the elements
	    	for(int j = 0; j < 1000; j++) {
	    		timeIntervalWithoutOne[j] = timeInterval[j];
	    	}
	    	tempAns = 0;
	    	for(int j = startValues[i]; j < endValues[i]; j++) 
	    	{
	    		timeIntervalWithoutOne[j]--;
	    	}
	    	for(int j = 0; j < 1000; j++) { //iterating through each timepoint and is going to count if there exists AT LEAST one life guard in the array
	    		if(timeIntervalWithoutOne[j] >= 1) {
	    			tempAns++;
	    		}
	    	}
	    	ans = Math.max(ans, tempAns);
	    }
	    pw.println(ans);
	    pw.close();
	  }
}