/*
ID: aayush02
LANG: C++11
TASK: cereal
*/
#include <assert.h> 
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip> 
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <set>
#include <functional>
#include <bitset>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <fstream>
#include <numeric>

#define INF 9223372036854775
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define F0R(i, a) for (int i = 0; i < (a); i++)
#define f first
//#define s second

#define ll long long
#define fi(n) for (ll i = 0; i < n; i++)
#define fj(n) for (ll j = 0; j < n; j++)
#define pi pair<ll, ll>
#define pb push_back
#define sz(x) (int)x.size()
#define beg(x) x.begin()
#define en(x) x.end()
#define all(x) beg(x), en(x)

const int MOD = 1e9 + 7;
const int MX = 200005;

using namespace std;

void setIO(string name) {
#pragma warning (disable : 4996)
	ios_base::sync_with_stdio(0); cin.tie(0);
	freopen((name + ".in").c_str(), "r", stdin);
	freopen((name + ".out").c_str(), "w", stdout);
}


struct mi {
	int v; explicit operator int() const { return v; }
	mi(ll _v) : v(_v%MOD) { v += (v < 0)*MOD; }
	mi() : mi(0) {}
};
mi operator+(mi a, mi b) { return mi(a.v + b.v); }
mi operator-(mi a, mi b) { return mi(a.v - b.v); }
mi operator*(mi a, mi b) { return mi((ll)a.v*b.v); }

using ii = pair<ll, ll>;
using iii = tuple<ll, ll, ll>;
using vi = vector<ll>;
using vii = vector<ii>;
using vvii = vector<vii>;
using qii = priority_queue<ii, vii, greater<ii>>;
typedef pair<mi, mi> pmi;
typedef vector<mi> vmi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
using vvi = vector<vi>;
typedef vector<pmi> vpmi;




ll n;
vector<pair<ll, ll>> points;
vector<pair<ll, ll>> todo[20001];

map < ll, mi > px;
map<ll, mi> py;

void check(bool isy)
{
	for (int i = 0; i <= 20000; i++)
	{
		if (todo[i].size() > 0)
		{
			mi cur = 0;
			ll siz = todo[i].size();
			sort(all(todo[i]));
			fj(siz)
			{
				if (j) cur = cur + todo[i][j].first - todo[i][0].first;
			}
			if (isy) py[todo[i][0].second] = cur;
			else px[todo[i][0].second] = cur;
			ll j = 1;
			ll total = 2;
			mi prev = cur;
			while (j < siz)
			{
				cur = prev + ((((2 * j - total) - ((siz - total) * (todo[i][j].first - todo[i][j - 1].first)))%MOD));
				if (isy) py[todo[i][j].second] = cur;
				else px[todo[i][j].second] = cur;
				total++;
				j++;
				prev = cur;
			}
		}
	}
}

int main()
{
	setIO("triangles");
	cin >> n;
	points.resize(n);
	fi(n)
	{
		cin >>	points[i].first >> points[i].second;
	}
	fi(n)
	{
		todo[points[i].first + 10000].pb({ points[i].second, i });
	}
	check(true);
	for (int i = 0; i <= 20000; ++i) todo[i].clear();
	fi(n)
	{
		todo[points[i].second + 10000].pb({ points[i].first, i });
	}
	check(false);
	mi ans = 0;
	mi prev = 0;
	fi(n)
	{
		ans = (ans + px[i] * py[i]);
		////if (ans.v != prev.v)
		//{
		//	cout << px[i].v << " " << py[i].v << endl;
		//	cout << ans.v << endl;
		//}
		prev = ans;
	}
	cout << ans.v << endl;
}

//int N;
//vector<pair<int, int>> v;
//vector<mi> sum[100005];
//vector<pair<int, int>> todo[20001];
//
//void check() {
//	for (int i = 0; i <= 20000; ++i) if (todo[i].size() > 0) {
//		int sz = todo[i].size();
//		sort(begin(todo[i]), end(todo[i]));
//		mi cur = 0;
//		for (int j = 0; j < sz; ++j)
//			cur = cur + todo[i][j].f - todo[i][0].f;
//		for (int j = 0; j < sz; ++j) {
//			if (j) cur = cur + (2 * j - sz)*(todo[i][j].f - todo[i][j - 1].f);
//			sum[todo[i][j].second].push_back(cur);
//		}
//	}
//}
//
//int main() {
//	setIO("6");
//	cin >> N; v.resize(N);
//	for (int i = 0; i < N; ++i) cin >> v[i].f >> v[i].second;
//	for (int i = 0; i <= 20000; ++i) todo[i].clear();
//	for (int i = 0; i < N; ++i)
//		todo[v[i].f + 10000].push_back({ v[i].second,i });
//	check();
//	for (int i = 0; i <= 20000; ++i) todo[i].clear();
//	for (int i = 0; i < N; ++i)
//		todo[v[i].second + 10000].push_back({ v[i].f,i });
//	check();
//	mi ans = 0;
//	mi prev = 0;
//	for (int i = 0; i < N; ++i)
//	{
//		ans = ans + sum[i][0] * sum[i][1];
//		if (ans.v != prev.v)
//		{
//			cout << sum[i][0].v << " " << sum[i][1].v << endl;
//			cout << ans.v << endl;
//		}
//		prev = ans;
//	}
//	cout << ans.v << "\n";
//}