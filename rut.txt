/*
ID: aayush02
LANG: C++11
TASK: rut
*/
#include <assert.h> 
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip> 
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <set>
#include <functional>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <fstream>
#include <numeric>
    
#define INF 9223372036854775
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define F0R(i, a) for (int i = 0; i < (a); i++)
#define f first
//#define s second

#define ll long long
#define fi(n) for (ll i = 0; i < n; i++)
#define fj(n) for (ll j = 0; j < n; j++)
#define pi pair<ll, ll>
#define pb push_back

using namespace std;

const int MOD = 1000000007;

void setIO(string name) {
#pragma warning (disable : 4996)
    ios_base::sync_with_stdio(0); cin.tie(0);
    freopen((name + ".in").c_str(), "r", stdin);
    //freopen((name + ".out").c_str(), "w", stdout);
}


struct mi {
    int v; explicit operator int() const { return v; }
    mi(ll _v) : v(_v% MOD) { v += (v < 0) * MOD; }
    mi() : mi(0) {}
};
mi operator+(mi a, mi b) { return mi(a.v + b.v); }
mi operator-(mi a, mi b) { return mi(a.v - b.v); }
mi operator*(mi a, mi b) { return mi((ll)a.v * b.v); }

using ii = pair<ll, ll>;
using iii = tuple<ll, ll, ll>;
using vi = vector<ll>;
typedef pair<ll, int> pii;
using vii = vector<ii>;
using vvii = vector<vii>;
using qii = priority_queue<ii, vii, greater<ii>>;
typedef pair<mi, mi> pmi;
typedef vector<mi> vmi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
using vvi = vector<vi>;
typedef vector<pmi> vpmi;


ll n, x, y;
char c;
vector<pair<pair<ll, ll>, ll>> north;
vector<pair<pair<ll, ll>, ll>> east;
vector<vector<ll>> v;
ll par[1001];
vector<bool> visited(1001);


bool cmp(pair<pair<ll, ll>, ll > x, pair<pair<ll, ll>, ll > y)
{
    return (x.first.second < y.first.second);
}

ll dfs(ll x) {
    int temp = 0;
    for (ll y1 : v[x]) {
        temp++;
        temp += dfs(y1);
    }
    return temp;
}


int main() {
    cin >> n; 
    fi(n) {
        cin >> c >> x >> y;
        if (c == 'N') {
            north.push_back({ {x,y}, i+1});
        }
        else {
            east.push_back({ {x,y}, i +1});
        }
    }
    sort(north.begin(), north.end());
    sort(east.begin(), east.end(), cmp);
    for (int i = 0; i < north.size(); i++) {
        for (int j = 0; j < east.size(); j++) {
            if (par[north[i].second] != 0 || par[east[j].second] != 0) {
                continue;
            }
            if (north[i].first.first < east[j].first.first || north[i].first.second > east[j].first.second) { //possibly consider if they are equal
                continue;
            }
            if (north[i].first.first - east[j].first.first < east[j].first.second - north[i].first.second) {
                par[north[i].second] = east[j].second;
            }
            if (north[i].first.first - east[j].first.first > east[j].first.second - north[i].first.second) {
                par[east[j].second] = north[i].second;
            }
        }
    }
    vector<ll> ans(n+1);
    v.resize(n+1, vector<ll>());
    fi(n+1) {
        if (!i)continue;
        v[par[i]].push_back(i);
    }
    fi(n + 1) {
        if (!i) continue;
        ans[i] = dfs(i);
    }
    fi(n+1) {
        if (!i)continue;
        cout << ans[i] << endl;
    }
}