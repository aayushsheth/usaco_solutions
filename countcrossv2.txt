	/*
	ID: aayush02
	LANG: C++11
	TASK: cereal
	*/
	#include <assert.h> 
	#include <iostream>
	#include <string>
	#include <sstream>
	#include <iomanip> 
	#include <math.h>
	#include <stdio.h>
	#include <string.h>
	#include <queue>
	#include <stack>
	#include <vector>
	#include <map>
	#include <set>
	#include <functional>
	#include <bitset>
	#include <algorithm>
	#include <unordered_map>
	#include <unordered_set>
	#include <queue>
	#include <fstream>
	#include <numeric>

	#define INF 9223372036854775
	#define FOR(i, a, b) for (int i = (a); i < (b); i++)
	#define F0R(i, a) for (int i = 0; i < (a); i++)
	#define f first
	//#define s second

	#define ll long long
	#define fi(n) for (ll i = 0; i < n; i++)
	#define fj(n) for (ll j = 0; j < n; j++)
	#define pi pair<ll, ll>
	#define pb push_back
	#define sz(x) (int)x.size()
	#define beg(x) x.begin()
	#define en(x) x.end()
	#define all(x) beg(x), en(x)

	const int MOD = 1e9 + 7;
	const int MX = 200005;

	using namespace std;

	void setIO(string name) {
	#pragma warning (disable : 4996)
		ios_base::sync_with_stdio(0); cin.tie(0);
		freopen((name + ".in").c_str(), "r", stdin);
		freopen((name + ".out").c_str(), "w", stdout);
	}


	struct mi {
		int v; explicit operator int() const { return v; }
		mi(ll _v) : v(_v%MOD) { v += (v < 0)*MOD; }
		mi() : mi(0) {}
	};
	mi operator+(mi a, mi b) { return mi(a.v + b.v); }
	mi operator-(mi a, mi b) { return mi(a.v - b.v); }
	mi operator*(mi a, mi b) { return mi((ll)a.v*b.v); }

	using ii = pair<ll, ll>;
	using iii = tuple<ll, ll, ll>;
	using vi = vector<ll>;
	using vii = vector<ii>;
	using vvii = vector<vii>;
	using qii = priority_queue<ii, vii, greater<ii>>;
	typedef pair<mi, mi> pmi;
	typedef vector<mi> vmi;
	typedef vector<bool> vb;
	typedef vector<vb> vvb;
	using vvi = vector<vi>;
	typedef vector<pmi> vpmi;

	ll n, k, r, x1, y11, x2, y2;
	map < pair<ll, ll>, vector<pair<ll, ll>>> check;
	vector<vector<bool>> double_check(101, vector<bool>(101));
	vector<vector<bool>> visited;
	vector<vector<vector<pair<ll, ll>>>> adj;
	vii cows;
	int dx[] = { 1, -1, 0, 0 };
	int dy[] = { 0, 0, 1, -1 };
	bool reachable(ll x, ll y, ll x1, ll y1)
	{
		if (x == x1 and y == y1)
		{
			return true;
		}
		visited[x][y] = true;
		bool flag = false;
		bool ok = false;
		fi(4)
		{
			if (x + dx[i] > n || x + dx[i] <= 0 || y + dy[i] > n || y + dy[i] <= 0 || visited[x + dx[i]][y + dy[i]])
			{
				continue;
			}
			ok = false;
			for (auto t: adj[x][y])
			{
				if (t.first == x + dx[i] and t.second == y + dy[i])
				{
					ok = true;
					break;
				}
			}
			if (ok) continue;
			flag |= reachable(x + dx[i], y + dy[i], x1, y1);

		}
		return flag;

	}
	int main()
	{
		setIO("countcross");
		adj.resize(101, vector<vector<pair<ll, ll >>>(101));
		cin >> n >> k >> r;
		fi(r)
		{
			cin >> x1 >> y11 >> x2 >> y2;
			adj[x1][y11].pb({ x2, y2 });
			adj[x2][y2].pb({ x1, y11 });
		}
	
		fi(k)
		{
			cin >> x1 >> y11;
			//double_check[x1][y11] = true;
			cows.pb({ x1, y11 });
		}
		ll ans = 0;
		fi(cows.size())
		{
			for (int j = i + 1; j < cows.size(); j++)
			{
				visited = vector<vector<bool>>(101, vector<bool>(101));
				if (reachable(cows[i].first, cows[i].second, cows[j].first, cows[j].second))
				{
					continue;
				}
				ans++;
			}
		}
		cout << ans << endl;
	}