/*
ID: aayush02
LANG: C++11
TASK: haybales
*/
#include <assert.h> 
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip> 
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <set>
#include <functional>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <fstream>
#include <numeric>

#define INF 9223372036854775
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define F0R(i, a) for (int i = 0; i < (a); i++)
#define f first
//#define s second

#define ll long long
#define fi(n) for (ll i = 0; i < n; i++)
#define fj(n) for (ll j = 0; j < n; j++)
#define pi pair<ll, ll>
#define pb push_back

const int MOD = 1e9 + 7;
const int MX = 200005;

using namespace std;

void setIO(string name) {
	#pragma warning (disable : 4996)
	ios_base::sync_with_stdio(0); cin.tie(0);
	freopen((name + ".in").c_str(), "r", stdin);
	freopen((name + ".out").c_str(), "w", stdout);
}


struct mi {
	int v; explicit operator int() const { return v; }
	mi(ll _v) : v(_v%MOD) { v += (v < 0)*MOD; }
	mi() : mi(0) {}
};
mi operator+(mi a, mi b) { return mi(a.v + b.v); }
mi operator-(mi a, mi b) { return mi(a.v - b.v); }
mi operator*(mi a, mi b) { return mi((ll)a.v*b.v); }

using ii = pair<ll, ll>;
using iii = tuple<ll, ll, ll>;
using vi = vector<ll>;
using vii = vector<ii>;
using vvii = vector<vii>;
using qii = priority_queue<ii, vii, greater<ii>>;
typedef pair<mi, mi> pmi;
typedef vector<mi> vmi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
using vvi = vector<vi>;
typedef vector<pmi> vpmi;


vector < pair < ll, ll> > v;
vector<ll> temp;
set<ll> s;
ll n, q, a, b;

int main()
{
	setIO("haybales");
	cin >> n >> q;
	ll counter = 0;
	fi(n)
	{
		cin >> a;
		temp.push_back(a);
		s.insert(a);
	}
	sort(temp.begin(), temp.end());
	ll c = 0;
	ll t1, t2, ad;
	ll mx = temp[temp.size() - 1];
	fi(q)
	{
		cin >> a >> b;
		if (a > mx)
		{
			cout << 0;
		}
		else
		{
			if (a < temp[0])
			{
				t1 = 0;
			}
			else
			{
				ad = s.count(a);
				t1 = (upper_bound(temp.begin(), temp.end(), a) - temp.begin()) - ad;
			}
			if (b > mx)
			{
				t2 = n - 1;
			}
			else
			{
				t2 = (lower_bound(temp.begin(), temp.end(), b) - temp.begin());
				if (temp[t2] > b)
				{
					t2--;
				}
			}
			cout << t2 - t1 + 1 << endl;
		}
	}

}